plugins {
    id 'com.gradleup.shadow'
}

loom {
    forge {
        mixinConfig "simplyspeakers.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    // JLayer (non-MC dependency)
    implementation "javazoom:jlayer:1.0.1"
    forgeRuntimeLibrary "javazoom:jlayer:1.0.1"
    shadowBundle "javazoom:jlayer:1.0.1" 

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'archives_name', rootProject.archives_name
    inputs.property 'mod_name', rootProject.mod_name
    inputs.property 'mod_description', rootProject.mod_description
    inputs.property 'mod_authors', rootProject.mod_authors
    inputs.property 'minecraft_version', rootProject.minecraft_version
    inputs.property 'architectury_api_version', rootProject.architectury_api_version

    filesMatching('META-INF/mods.toml') {
        expand(
            version: project.version, 
            archives_name: rootProject.archives_name,
            mod_name: rootProject.mod_name,
            mod_description: rootProject.mod_description,
            mod_authors: rootProject.mod_authors,
            minecraft_version: rootProject.minecraft_version,
            architectury_api_version: rootProject.architectury_api_version
        )
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
